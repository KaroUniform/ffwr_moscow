import datetime
from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import ChatPermissions
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, BotCommand
from filters.role import RoleFilter
from models.jaynecobbdatabase import UsersToChats
from bot_utils import deepgetattr

router = Router()
router.message.filter(F.text)

commands = [
    BotCommand(command='/warn', description="[reply_to_message] –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"),
    BotCommand(command='/unwarn', description="[reply_to_message] —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"),
]

@router.message((F.reply_to_message), Command('warn'), RoleFilter('moderator'))
@router.message((F.reply_to_message), Command('warn'), RoleFilter('admin'))
@router.message((F.reply_to_message), Command('warn'), RoleFilter('owner'))
async def warn(message: Message, bot: Bot):
    
    full_name = deepgetattr(message, 'reply_to_message.from_user.full_name')
    user_in_chat, created = UsersToChats.get_or_create(
        chat=message.chat.id,
        user=message.reply_to_message.from_user.id
    )

    if user_in_chat.warn_count < 2:
        user_in_chat.warn_count += 1
        await message.reply(
            text=f'‚ö†Ô∏è{full_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —Ç–µ–ø–µ—Ä—å –∏—Ö {user_in_chat.warn_count}',
        )
        user_in_chat.save()
        return
    
    if (user_in_chat.warn_count >= 2) and (user_in_chat.warn_count <4):
        until = 24
        until = datetime.datetime.now() + datetime.timedelta(hours=until)
        try:
            await bot.restrict_chat_member(
                message.chat.id, 
                message.reply_to_message.from_user.id,
                permissions=ChatPermissions(
                    can_send_messages= False,
                    can_send_audios= False,
                    can_send_documents= False,
                    can_send_photos= False,
                    can_send_videos= False,
                    can_send_video_notes= False,
                    can_send_voice_notes= False,
                    can_send_polls= False,
                    can_send_other_messages= False,
                    can_add_web_page_previews= False,
                    can_change_info= False,
                    can_invite_users= False,
                    can_pin_messages= False,
                    can_manage_topics= False
                ),
                until_date=until
            )
            user_in_chat.warn_count += 1
            user_in_chat.is_banned = True
            user_in_chat.save()
            await message.reply(
                text=f'üîá–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {str(until)[:-7]} –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_in_chat.warn_count}',
            )
        
        except TelegramBadRequest:
            await message.reply(
                text=f'üò¢–ù–µ –∏–º–µ—é –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ',
            )
        return
    
    
    try:
        await bot.ban_chat_member(
            message.chat.id, 
            message.reply_to_message.from_user.id
        )
        await message.reply(
            text=f'üî®{full_name} –ø–æ–ª—É—á–∏–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
        )
        user_in_chat.warn_count += 1
        user_in_chat.is_banned = True
        user_in_chat.save()
        
    except TelegramBadRequest:
        await message.reply(
            text=f'üò¢–ù–µ –∏–º–µ—é –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ',
        )
        
@router.message((F.reply_to_message), Command('unwarn'), RoleFilter('moderator'))
@router.message((F.reply_to_message), Command('unwarn'), RoleFilter('admin'))
@router.message((F.reply_to_message), Command('unwarn'), RoleFilter('owner'))
async def warn(message: Message, bot: Bot):
    
    full_name = deepgetattr(message, 'reply_to_message.from_user.full_name')
    user_in_chat, created = UsersToChats.get_or_create(
        chat=message.chat.id,
        user=message.reply_to_message.from_user.id
    )
    
    if user_in_chat.warn_count == 0:
        await message.reply(
            text=f'üõë{full_name} –Ω–µ –∏–º–µ–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_in_chat.warn_count}',
        )
        return
    
    if user_in_chat.warn_count != 5:
        user_in_chat.warn_count -= 1
        await message.reply(
            text=f'‚¨áÔ∏è{full_name} –∏–∑–±–∞–≤–ª–µ–Ω –æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {user_in_chat.warn_count}',
        )
        user_in_chat.save()
        return
        
    try:
        user_in_chat.warn_count -= 1
        await message.reply(
            text=f'üîì{full_name} –∏–∑–±–∞–≤–ª–µ–Ω –æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {user_in_chat.warn_count}',
        )
        await bot.unban_chat_member(
            message.chat.id, 
            message.reply_to_message.from_user.id,
            only_if_banned=True,
        )
        user_in_chat.is_banned = False
        user_in_chat.save()
    except TelegramBadRequest:
        await message.reply(
            text=f'üò¢–ù–µ –∏–º–µ—é –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ',
        )
        

        
    
    
